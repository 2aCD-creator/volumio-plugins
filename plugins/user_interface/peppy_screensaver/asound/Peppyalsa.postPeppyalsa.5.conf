#------ PeppyAlsa section -------

# ---> pass throught audio pipeline
# if separat alsa pipeline enabled (DSD direct)
pcm.peppy2_off {
  type empty
  slave.pcm "postpeppyalsa"
}
 
# --> duplicate route for meters to play also DSD files
# if modular alsa enabled
pcm.Peppyalsa {
  type plug
  route_policy "duplicate"
  slave.channels 4
  slave.pcm {
    type multi

    slaves.a.pcm "postpeppyalsa"
    slaves.a.channels 2
    slaves.b.pcm "mpd_peppyalsa"
    slaves.b.channels 2

    bindings.0 { slave a; channel 0; }
    bindings.1 { slave a; channel 1; }
    bindings.2 { slave b; channel 0; }
    bindings.3 { slave b; channel 1; }
  }
}

# ---> input from exclusive MPD output for peppyalsa
pcm.mpd_peppyalsa{
	type meter
	slave.pcm "dummy"
	scopes.0 peppyalsa
}

# standard scope
pcm_scope.peppyalsa {
  type peppyalsa
  decay_ms 400
  meter "/tmp/myfifo"
  meter_max 100
  meter_show 0
}

# ---> separate spotify pipeline
pcm.spotify {
  type plug
  slave {
    pcm "spd_peppyalsa"
    format "S16_LE"   
  }
}

# spotify meter definition
pcm.spd_peppyalsa{
	type meter
	slave.pcm "spd_output"
	scopes.0 peppyalsa_spd
}

# scope for spotify (more level)
pcm_scope.peppyalsa_spd {
  type peppyalsa
  decay_ms 400
  meter "/tmp/myfifo"
  meter_max 150
  meter_show 0
}

# needed for some sound cards otherwiese Spotify stops playing after 10 seconds
pcm.spd_output {
  type copy
  slave.pcm "postpeppyalsa"
}
# <---

pcm_scope_type.peppyalsa {
    lib /usr/local/lib/libpeppyalsa.so
}

# null output
pcm.dummy {
  type hw
	card Dummy
	device 0
}

pcm.postpeppyalsa {
  type empty
  slave.pcm "postPeppyalsa"
}
#------ End of PeppyAlsa section ------
